{"version":3,"sources":["SnakeSegment.js","SnakeFruit.js","SnakeBoard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["SnakeSegment","props","react_default","a","createElement","cx","x","cy","y","r","SnakeFruit","style","fill","SnakeBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeDirection","key","snakeDirection","state","keyCode","setState","console","log","moveSnake","snakeSegments","objectSpread","snakeSegmentSize","width","height","snakeGrowth","concat","slice","appendFruit","Math","random","newFruitProbability","fruits","fruit","size","fruitSize","age","push","removeFruits","existingFruits","forEach","filter","fruitExpiration","doItemsCollide","b","minRequiredDistance","abs","hasCollision","item","some","segment","handleGameState","running","length","stopGame","clearInterval","tick","setInterval","tickDelay","getInitialSnake","document","addEventListener","i","initialSnakeSize","_this2","strokeWidth","stroke","map","index","src_SnakeSegment","src_SnakeFruit","Component","App","className","src","logo","alt","src_SnakeBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8db682d9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SnakeSegment = props => (\r\n  <circle cx={props.x} cy={props.y} r={props.r} />\r\n)\r\n\r\nexport default SnakeSegment;\r\n","import React from 'react';\r\n\r\nconst SnakeFruit = props => (\r\n  <circle cx={props.x} cy={props.y} r={props.r} style={{fill:'rgb(255,0,0)'}} />\r\n)\r\n\r\nexport default SnakeFruit;\r\n","import React, { Component } from 'react';\r\nimport SnakeSegment from './SnakeSegment.js'\r\nimport SnakeFruit from './SnakeFruit.js'\r\nimport './App.css';\r\n\r\nclass SnakeBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      fruits: [],\r\n      running: true,\r\n      snakeDirection: [1, 0],\r\n      snakeGrowth: 0,\r\n      snakeSegments: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ snakeSegments: this.getInitialSnake() })\r\n    document.addEventListener('keydown', this.changeDirection)\r\n    this.tick()\r\n  }\r\n\r\n  getInitialSnake() {\r\n    const snakeSegments = []\r\n    for (let i = 0; i < this.props.initialSnakeSize; i++) {\r\n      const segment = {\r\n        x: this.props.width / 2 - this.props.snakeSegmentSize * i,\r\n        y: this.props.height / 2,\r\n        size: this.props.snakeSegmentSize\r\n      }\r\n      snakeSegments.push(segment)\r\n    }\r\n    return snakeSegments\r\n  }\r\n\r\n  changeDirection = key => {\r\n    const {snakeDirection} = this.state\r\n    switch(key.keyCode) {\r\n      case 38:\r\n        if (snakeDirection[1] !== 1) {\r\n          this.setState({ snakeDirection: [0, -1] })\r\n        }\r\n        break\r\n      case 39:\r\n        if (snakeDirection[0] !== -1) {\r\n          this.setState({ snakeDirection: [1, 0] })\r\n        }\r\n        break\r\n      case 40:\r\n        if (snakeDirection[1] !== -1) {\r\n          this.setState({ snakeDirection: [0, 1] })\r\n        }\r\n        break\r\n      case 37:\r\n        if (snakeDirection[0] !== 1) {\r\n          this.setState({ snakeDirection: [-1, 0] })\r\n        }\r\n        break\r\n      default:\r\n        console.log('lol')\r\n    }\r\n  }\r\n\r\n  moveSnake = () => {\r\n    const snakeSegments = [\r\n      {\r\n        ...this.state.snakeSegments[0],\r\n        x: (this.state.snakeSegments[0].x + this.state.snakeDirection[0] * this.props.snakeSegmentSize + this.props.width) % this.props.width,\r\n        y: (this.state.snakeSegments[0].y + this.state.snakeDirection[1] * this.props.snakeSegmentSize + this.props.height) % this.props.height\r\n      }\r\n    ]\r\n    if (this.state.snakeGrowth) {\r\n      return snakeSegments.concat(this.state.snakeSegments)\r\n    } else {\r\n      return snakeSegments.concat(this.state.snakeSegments.slice(0, -1))\r\n    }\r\n  }\r\n\r\n  appendFruit = () => {\r\n    const newFruitChance = Math.random()\r\n    if (newFruitChance < this.props.newFruitProbability) {\r\n      const fruits = this.state.fruits.slice()\r\n      const fruit = {\r\n        x: this.props.width * Math.random(),\r\n        y: this.props.height * Math.random(),\r\n        size: this.props.fruitSize,\r\n        age: 0\r\n      }\r\n      fruits.push(fruit)\r\n      return this.removeFruits(fruits)\r\n    }\r\n    return this.removeFruits(this.state.fruits)\r\n  }\r\n\r\n  removeFruits = (existingFruits) => {\r\n    const fruits = existingFruits.slice()\r\n    fruits.forEach(fruit => fruit.age++)\r\n    const fruitsWithoutExpired = fruits.filter(fruit => fruit.age < this.props.fruitExpiration)\r\n    return fruitsWithoutExpired\r\n  }\r\n\r\n  doItemsCollide = (a, b) => {\r\n  const minRequiredDistance = (a.size / 2) + (b.size / 2)\r\n\r\n  return (\r\n    Math.abs(a.x - b.x) < minRequiredDistance\r\n    && Math.abs(a.y - b.y) < minRequiredDistance\r\n  )}\r\n\r\n  hasCollision = item => {\r\n    return this.state.snakeSegments.some(segment => this.doItemsCollide(item, segment))\r\n  }\r\n\r\n  handleGameState = () => {\r\n    if (!this.state.running) {\r\n      this.stopGame()\r\n      return\r\n    }\r\n    this.setState({\r\n      snakeSegments: this.moveSnake(),\r\n      fruits: this.appendFruit().filter(fruit => !this.hasCollision(fruit)),\r\n      snakeGrowth: !!this.appendFruit().filter(fruit => this.hasCollision(fruit)).length,\r\n      running: !this.hasCollision(this.moveSnake()[0])\r\n    })\r\n  }\r\n\r\n  stopGame = () => {\r\n    clearInterval(this.tick)\r\n  }\r\n\r\n  tick = () => {\r\n    setInterval(() => this.handleGameState(), this.props.tickDelay)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <svg width={this.props.width} height={this.props.height} >\r\n        <rect width={this.props.width} height={this.props.height} style={{fill:'rgb(0,0,255)', strokeWidth:3, stroke:'rgb(0,0,0)'}} />\r\n        {\r\n          this.state.snakeSegments.map(\r\n            (segment, index) => <SnakeSegment key={index} x={segment.x} y={segment.y} r={this.props.snakeSegmentSize / 2} />\r\n          )\r\n        }\r\n        {\r\n          this.state.fruits.map(\r\n            (fruit, index) => <SnakeFruit key={index} x={fruit.x} y={fruit.y} r={this.props.fruitSize / 2} />\r\n          )\r\n        }\r\n      </svg>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SnakeBoard;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SnakeBoard from './SnakeBoard.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <div className=\"App-intro\">\n          <SnakeBoard\n            width={320}\n            height={240}\n            fruitExpiration={100}\n            fruitSize={18}\n            newFruitProbability={0.1}\n            snakeSegmentSize={10}\n            tickDelay={200}\n            initialSnakeSize={6}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}